import logging
import random
import os
import subprocess
from datetime import datetime, timedelta
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import Database  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ db.py
from keyboards import main_menu, subscription_options  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '8005821803:AAG5oLy-BhqKyvfEgNnMgeYfDKCNvsIGIQU'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    user_id = message.from_user.id
    if not db.user_exists(user_id):
        db.add_user(user_id)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())

# –ö–æ–º–∞–Ω–¥–∞ /replenish (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞)
@dp.message_handler(commands=['replenish'])
async def handle_replenish(message: types.Message):
    user_id = message.from_user.id
    db.update_balance(user_id, 100)  # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 100 —Ä—É–±.
    await message.answer("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100 —Ä—É–±.")

# –ö–æ–º–∞–Ω–¥–∞ /buy_vpn (–ø–æ–∫—É–ø–∫–∞ VPN)
@dp.message_handler(commands=['buy_vpn'])
async def buy_vpn(message: types.Message):
    user_id = message.from_user.id
    await message.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=subscription_options())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data in ['1_month', '2_months', '3_months'])
async def handle_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    duration = int(callback.data.split('_')[0])  # 1, 2 –∏–ª–∏ 3 –º–µ—Å—è—Ü–∞
    price = {1: 100, 2: 180, 3: 260}[duration]  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏

    if db.get_balance(user_id) >= price:
        port = random.randint(10000, 65535)
        config_id = db.add_config(user_id, duration, port)
        db.update_balance(user_id, -price)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN —Å –ø–æ–º–æ—â—å—é newclient.sh
        try:
            subprocess.run(["./newclient.sh", str(user_id), "your_endpoint", "your_wg_config_file", "your_docker_container"], check=True)
            await send_config(user_id, config_id)
            await callback.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration} –º–µ—Å—è—Ü(–µ–≤) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN.")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /account (–ø—Ä–æ—Ñ–∏–ª—å)
@dp.message_handler(commands=['account'])
async def handle_account(message: types.Message):
    user_id = message.from_user.id
    configs = db.get_configs(user_id)

    if not configs:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.")
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    for config in configs:
        btn_text = f"üîë –ö–æ–Ω—Ñ–∏–≥ #{config['config_id']} (–¥–æ {config['end_date']})"
        keyboard.add(InlineKeyboardButton(btn_text, callback_data=f"config_{config['config_id']}"))

    await message.answer("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data.startswith('config_'))
async def handle_config(callback: types.CallbackQuery):
    config_id = int(callback.data.split('_')[1])
    config = db.get_config(config_id)

    if not config:
        await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{config_id}"),
        InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{config_id}"),
        InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"extend_{config_id}")
    )

    await callback.message.edit_text(
        f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥ #{config_id}\n–ü–æ—Ä—Ç: {config['port']}\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {config['end_date']}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data.startswith('delete_'))
async def handle_delete(callback: types.CallbackQuery):
    config_id = int(callback.data.split('_')[1])
    config = db.get_config(config_id)
    
    if config:
        try:
            subprocess.run(["./removeclient.sh", str(config['user_id']), config['public_key'], "your_wg_config_file", "your_docker_container"], check=True)
            db.delete_config(config_id)
            await callback.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")
            await handle_account(callback.message)
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN.")
    else:
        await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data.startswith('download_'))
async def handle_download(callback: types.CallbackQuery):
    config_id = int(callback.data.split('_')[1])
    await send_config(callback.from_user.id, config_id)
    await callback.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data.startswith('extend_'))
async def handle_extend(callback: types.CallbackQuery):
    config_id = int(callback.data.split('_')[1])
    await callback.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
        reply_markup=subscription_options(config_id)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: 'extend' in c.data)
async def handle_extend_subscription(callback: types.CallbackQuery):
    parts = callback.data.split('_')
    duration = int(parts[0])  # 1, 2 –∏–ª–∏ 3 –º–µ—Å—è—Ü–∞
    config_id = int(parts[-1])  # ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    price = {1: 100, 2: 180, 3: 260}[duration]  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏

    user_id = callback.from_user.id
    if db.get_balance(user_id) >= price:
        db.extend_config(config_id, duration)
        db.update_balance(user_id, -price)
        await callback.answer(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {duration} –º–µ—Å—è—Ü(–µ–≤)!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async def send_config(user_id, config_id):
    try:
        config = db.get_config(config_id)
        if config:
            content = f"""üîë –í–∞—à –∫–æ–Ω—Ñ–∏–≥:
ID: {config['config_id']}
–ü–æ—Ä—Ç: {config['port']}
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {config['end_date']}"""
            
            filename = f"config_{config_id}.txt"
            with open(filename, "w", encoding="utf-8") as f:
                f.write(content)
            
            with open(filename, "rb") as f:
                await bot.send_document(user_id, f, caption="üìÇ –í–∞—à –∫–æ–Ω—Ñ–∏–≥ VPN")
            
            os.remove(filename)
        else:
            await bot.send_message(user_id, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    
