import logging
import random
import os
import subprocess
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InputFile, FSInputFile
import asyncio
from db import Database, SSHManager, load_servers, save_servers, add_server, remove_server, get_server_list
from keyboards import *
import logging 



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

TOKEN = '8005821803:AAFpKbNlXVPMair_JQKcOzQ4gj2JgsiWZdc'

db = Database()
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
WG_CONFIG_FILE = "/opt/amnezia/awg/wg0.conf"  # –¢–∞–∫–∏–µ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
DOCKER_CONTAINER = "amnezia-awg"  # –¢–∞–∫ –∂–µ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É 
ENDPOINT = "89.208.97.144"  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
CURRENT_SERVER = None


@router.message(Command("start"))
async def handle_start(message: Message):
    user_id = message.from_user.id
    if not db.user_exists(user_id):
        db.add_user(user_id)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

    logo_path = "logo.png"
    try:
        if os.path.exists(logo_path):
            await message.answer_photo(
                photo=FSInputFile(logo_path),
                caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *VPN –ë–æ—Ç!*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="Markdown",
                reply_markup=main_menu()
            )
        else:
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –ë–æ—Ç!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu()
        )
        
@router.callback_query(lambda c: c.data == "replenish")
async def handle_replenish(callback: CallbackQuery):
    user_id = callback.from_user.id
    db.update_balance(user_id, 100)
    
    try:
        await bot.edit_message_caption(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            caption="‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100 —Ä—É–±.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏: {e}")
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100 —Ä—É–±.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
            )
        )
    await callback.answer()


@router.callback_query(lambda c: c.data == "buy_vpn")
async def buy_vpn(callback: CallbackQuery):
    await bot.edit_message_caption(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        caption="üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=subscription_options()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "install_guide")
async def handle_install_guide(callback: CallbackQuery):
    await callback.message.edit_text(
        "üì≤ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:",
        reply_markup=install_menu()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("install_"))
async def handle_install_platform(callback: CallbackQuery):
    platform = callback.data.split("_")[1]
    await callback.message.edit_text(
        f"üîß –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è {platform.upper()}:",
        reply_markup=platform_guide_menu(platform)
    )
    await callback.answer()

@router.callback_query(lambda c: c.data == "back_to_install")
async def handle_back_to_install(callback: CallbackQuery):
    await callback.message.edit_text(
        "üì≤ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:",
        reply_markup=install_menu()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data in ['1_month', '2_months', '3_months'])
async def handle_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    duration = int(callback.data.split('_')[0])
    price = {1: 100, 2: 180, 3: 260}[duration]

    if db.get_balance(user_id) >= price:
        port = random.randint(10000, 65535)
        config_id = db.add_config(user_id, duration, port)
        db.update_balance(user_id, -price)

        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏
            subprocess.run(
                ["./newclient.sh", str(user_id), str(config_id), ENDPOINT, WG_CONFIG_FILE, DOCKER_CONTAINER],
                check=True
            )
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration} –º–µ—Å—è—Ü(–µ–≤) —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª",
                reply_markup=main_menu()
            )
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")

@router.callback_query(lambda c: c.data == "account")
async def handle_account(callback: CallbackQuery):
    user_id = callback.from_user.id
    configs = db.get_configs(user_id)
    if not configs:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
            )
        )
        return

    keyboard = configs_menu(configs)
    await callback.message.edit_text("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith('config_'))
async def handle_config(callback: CallbackQuery):
    config_id = int(callback.data.split('_')[1])
    config = db.get_config(config_id)

    if not config:
        await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    keyboard = config_actions(config_id)
    await callback.message.edit_text(
        f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥ #{config_id}\n–ü–æ—Ä—Ç: {config['port']}\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {config['end_date']}",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data.startswith('delete_'))
async def handle_delete(callback: CallbackQuery):
    config_id = int(callback.data.split('_')[1])
    config = db.get_config(config_id)

    if config:
        try:
            subprocess.run(
                ["./removeclient.sh", str(config['user_id']), "your_public_key", WG_CONFIG_FILE, DOCKER_CONTAINER],
                check=True
            )
            db.delete_config(config_id)
            await callback.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")
            await handle_account(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    else:
        await callback.answer("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@router.callback_query(lambda c: c.data.startswith('download_'))
async def handle_download(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    config_id = int(callback.data.split('_')[1])
    await _send_config_file(callback.from_user.id, config_id)
    await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

async def _send_config_file(user_id: int, config_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        config = db.get_config(config_id)
        if not config:
            await bot.send_message(user_id, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = f"./users/{user_id}/{user_id}_{config_id}.conf"
        
        if not os.path.exists(file_path):
            await bot.send_message(user_id, "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return

        await bot.send_document(
            chat_id=user_id,
            document=types.FSInputFile(file_path),
            caption=f"üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{config_id}\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {config['end_date']}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")

@router.callback_query(lambda c: c.data.startswith('extend_'))
async def handle_extend(callback: CallbackQuery):
    config_id = int(callback.data.split('_')[1])
    await callback.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
        reply_markup=subscription_options(config_id)
    )

@router.callback_query(lambda c: 'extend' in c.data)
async def handle_extend_subscription(callback: CallbackQuery):
    parts = callback.data.split('_')
    duration = int(parts[0])  # 1, 2 –∏–ª–∏ 3 –º–µ—Å—è—Ü–∞
    config_id = int(parts[-1])  # ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    price = {1: 100, 2: 180, 3: 260}[duration]  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏

    user_id = callback.from_user.id
    if db.get_balance(user_id) >= price:
        db.extend_config(config_id, duration)
        db.update_balance(user_id, -price)
        await callback.answer(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {duration} –º–µ—Å—è—Ü(–µ–≤)!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")

async def send_config(user_id, config_id):
    try:
        config = db.get_config(config_id)
        if config:
            # –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            config_file_path = f"./users/{user_id}/{user_id}.conf"
            if os.path.exists(config_file_path):
                with open(config_file_path, "rb") as f:
                    await bot.send_document(user_id, f, caption="üìÇ –í–∞—à –∫–æ–Ω—Ñ–∏–≥ VPN")
            else:
                await bot.send_message(user_id, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await bot.send_message(user_id, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

@router.callback_query(lambda c: c.data == "back_to_account")
async def handle_back_to_account(callback: CallbackQuery):
    await handle_account(callback)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("back_to_config_"))
async def handle_back_to_config(callback: CallbackQuery):
    try:
        config_id = int(callback.data.split("_")[-1])
        await handle_config(callback)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç config_id: {callback.data}")

@router.callback_query(lambda c: c.data == "channel")
async def handle_channel(callback: CallbackQuery):
    await bot.edit_message_caption(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        caption="üì¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –∫–∞–Ω–∞–ª—É:",
        reply_markup=channel_menu()
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "support")
async def handle_support(callback: CallbackQuery):
    await callback.message.edit_text(
        "üÜò –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
        reply_markup=support_menu()
    )
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("back_to_main"))
async def handle_back_main(callback: CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
